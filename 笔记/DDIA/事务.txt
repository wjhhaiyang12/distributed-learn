1. 事务提供的安全保证是ACID，代表原子性（Atomicity），一致性（Consistency），隔离性（Isolation）和持久性（Durability）

2. 原子性在不同的场景下有不同的解释:
   a.在多线程编程中，是指一个线程的原子操作，另一个线程无法看到他的中间结果，只能看到操作前和操作后的结果。
   b.在事务的场景下，是指事务因为错误被终止后，丢弃改事务之前做的所有变更写入。

3. 一致性: 数据必须满足外部指定的约束，比如外键约束，唯一键约束等。

4. 隔离性: 同时执行的事务，他们不能相互干扰。

5. 持久性: 一旦事务执行成功，就算发生硬件故障或数据库崩溃，数据也不会丢失。

6. 单个对象的写入也需要原子性和隔离性, 这些存储引擎需要解决的问题:
   a.如果在发送第一个10 KB之后网络连接中断，数据库是否存储了不可解析的10KB JSON片段？
   b.如果在数据库正在覆盖磁盘上的前一个值的过程中电源发生故障，是否最终将新旧值拼接在一起？
   c.如果另一个客户端在写入过程中读取该文档，是否会看到部分更新的值？

7. 读已提交(read commited)保证读取和写入都只影响已经提交的数据，所以可以避免脏读和脏写。
   a.脏读: 能读到另一个并行事务还未提交的数据变更。
   b.脏写: 能读到另一个并行事务还未提交的数据变更。

8. 防止脏写的实现是使用行锁。写数据必须使用一把独占的写锁，并行的事务会一直等待，直到上一个事务提交，释放写锁。
   防止脏读的方式是记录旧值，通过MVCC来实现，其它事务读取的都是最后一次提交的旧值。

9. 读已提交(read commited)虽然解决了脏读和脏写，但仍然存在"不可重复读"的问题，在事务里读取同一份数据，可能会因为其它事务提交了修改，导致前后读到不同的值。

10. 为了解决"不可重复读"的问题，数据库引入了新的隔离级别"快照隔离"，或者叫做"可重复读"。

11. 使用MVCC来解决"不可重复读"的问题
    a.通过给每个事务分配一个递增是事务ID，来确定他们的先后顺序。
    b.每次写入数据，是生成一份带有当前事务ID的新的数据快照。
    c.事务在读取数据时，会根据当前的事务ID，来决定读取哪一份数据。
    d.在"读已提交"的场景下，每次查询，查询的是最近一次已提交的数据
    e.在"不可重复读"的场景下，每次查询，查询的是事务ID小于当前事务ID的数据

12. "读已提交"和"可重复读"不能解决"丢失更新"的问题。
    比如计数器功能，两个事务同时读取计数器的值，把值+1，再更新回去。这种情况下会出现"丢失更新"的问题。

13. 很多数据库提供了原子更新来解决"丢失更新"的问题。
    比如在大多数关系数据库中是并发安全: UPDATE counters SET value = value + 1 WHERE key = 'foo'。

14. 另一种方式是使用独占锁，显示地锁定要修改的对象。比如使用FOR UPDATE语句可以锁定上一句查询返回地数据。

15. 另一种方式是在事务管理器里自动检测"丢失更新"，如果发现问题，中止事务并重试。这种方式的好处是不需要在应用层的代码里做任何特殊的处理。

16. "幻读"是"可重复读"解决不了的问题。
    比如程序的逻辑是，只在总数据量<100的情况下，插入数据。当两个线程并发的时候，他们查询时总数量都<100，然后执行了插入，最终导致出现了101条数据。
    解决幻读可以使用数据库提供的唯一约束，也可以用锁的方式，或者使用最高的"可串行化"的隔离级别。

17. "可序列化"是最高的隔离级别，它保证即使事务并行执行，最终的结果也是一样的。
    "可序列化"的实现方式有三种: 真正的串行执行事务、两阶段锁定(2PC)、乐观锁。

18. 真正的串行执行事务，意味着事务的写入吞吐量只能限制在单机单核的性能上。虽然能解决所有并发冲突，但性能会严重降低。

19. 适合使用串行执行事务的场景：
    a.每个事务必须小而快，只要有长事务出现，就会拖累其它事务的执行。
    b.事务涉及的活跃数据集可以全部放在内存里访问，否则在单线程事务里还要访问磁盘，会非常慢。
    c.写入的吞吐量必须很低，能在单核上处理。

20. 两阶段锁定，是最广泛使用的，实现"可序列化"的方案。

21. 两阶段锁定使用共享锁和独占锁来实现。
    a.读对象要获取共享锁，写对象要获取独占锁。
    b.事务获取锁以后，会一直持有锁，直到事务提交才释放。
    c.数据库会自动检测死锁，发现死锁后，会直接中止其中一个事务，并重试。

22. 解决"幻读"的问题，需要引入"谓词锁"。
    比如预定会议室的场景，用户在查询某个时间范围有没有人预定会议室时，就会针对查询的时间范围加上锁，即使没有对应的数据。






    



