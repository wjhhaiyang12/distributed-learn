1. 数据副本的用途
   a.减少延迟，使数据与用户在地理上接近
   b.提高可用性，当系统一部分出现故障时，系统也能继续工作
   c.扩展读取的吞吐量，读写分离

2. 数据复制的一大难题是，数据发生变化后，怎么保证各个副本上的数据是保持一致的。
   流行的变更复制算法有三种：单领导者、多领导者、无领导者。

3. 单领导者，就是主/从复制。只有主节点能写入，主节点写入成功后，将变更发送给其它副本。常见的Mysql，MongoDB，Kafka使用的都是主从复制。

4. 同步复制：数据写入到所有副本后，主库才返回成功。
   优点：从库保证有和主库一致的数据。只要是返回成功的写入，一定能在从库里读到。
   缺点：可用性降低，延迟提高。数据同步到任意副本失败，都会导致写入失败。

5. 异步复制：数据写入主库后就返回成功，后续由异步线程把数据同步到各个副本。
   优点：高性能，不需要等待数据同步；高可用，数据复制失败，不影响主库的读写功能。
   缺点：会丢数据，主库故障，可能会导致写入成功的数据丢失。数据复制的延迟时间在极端情况下可能会很久。

6. 从库故障的恢复相对简单。
   a.完全新建从库：从主库获取一份数据快照，再从数据快点的位置，开始执行后续的数据变更指令，可在短时间内追上主库的数据。
   b.重启从库：从上次同步数据的位置开始，依次执行后续的数据变更指令。

7. 主库故障的恢复需要选择新的主节点，可能会出现很大的麻烦。
   a.异步复制的情况下，新的主节点数据有可能是落后的，用户之前写入成功的数据就丢失了。
   b.如果数据库与外部存储协调。落后的主节点数据会导致使用已经分配掉的主键id，可能会在外部存储上造成故障。
   c.脑裂：同时有两个节点，都认为自己是主节点。
   d.主节点的健康检测也是一大问题，超时时间过长会导致故障恢复时间慢，超时时间过段会导致不必要的切换。

8. 复制日志的实现方式有多种: 
   a.基于语句复制: 从库执行和主库相同的变更语句，但如果语句中出现rand()不确定的表达式，这种方式会有问题。
   b.WAL(Write Ahead Log): 记录哪个磁盘块的哪些字节发生了变化。这种方式和存储引擎紧密耦合，不同的存储引擎，甚至不同版本都有可能不兼容。
   c.逻辑日志复制：记录每一行的数据发生了什么改变。优点是和底层的存储引擎解耦，日志可读性也很强。

9. 多主复制的使用场景主要有: 多数据中心多活、协同编辑功能。
   多主带来问题就是，可能会同时在多个主节点修改相同的数据，这时就产生了数据冲突。